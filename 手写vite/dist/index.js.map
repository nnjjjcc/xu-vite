{"version":3,"sources":["../src/node/cli.ts","../src/node/server/index.ts","../src/node/optimizer/index.ts","../src/node/constants.ts","../src/node/optimizer/scanPlguin.ts","../src/node/optimizer/preBundlePlugin.ts","../src/node/utils.ts"],"sourcesContent":["import cac from \"cac\";\r\nimport { startDevServer } from \"./server\";\r\n//1.cli 功能和服务启动的逻辑目前就已经成功搭建\r\n// vite 首先通过 cac 作为简单的参数解析器\r\n// cac是一个用于构建 CLI 应用程序的 JavaScript 库。\r\nconst cli = cac();\r\ncli\r\n  .command(\"[root]\", \"Run the development server\")\r\n  .alias(\"serve\")\r\n  .alias(\"dev\")\r\n  .action(async () => {\r\n    console.log(\"测试 cli~\");\r\n    await startDevServer();\r\n  });\r\n\r\ncli.help();\r\n\r\ncli.parse();\r\n","import connect from \"connect\";\r\n// connect 是一个具有中间件机制的轻量级 Node.js 框架。\r\n// 既可以单独作为服务器，也可以接入到任何具有中间件机制的框架中，如 Koa、Express\r\nimport { blue, green } from \"picocolors\";\r\nimport { optimize } from \"../optimizer/index\";\r\nexport async function startDevServer() {\r\n  const app = connect();\r\n  const root = process.cwd();\r\n  const startTime = Date.now();\r\n  app.listen(3000, async () => {\r\n    await optimize(root);\r\n    console.log(\r\n      green(\"🚀 No-Bundle 服务已经成功启动!\"),\r\n      `耗时: ${Date.now() - startTime}ms`\r\n    );\r\n    console.log(`> 本地访问路径: ${blue(\"http://localhost:3000\")}`);\r\n  });\r\n}\r\n","import path from \"path\";\r\nimport { build } from \"esbuild\";\r\nimport { green } from \"picocolors\";\r\nimport { scanPlugin } from \"./scanPlguin\";\r\nimport { preBundlePlugin } from \"./preBundlePlugin\";\r\nimport { PRE_BUNDLE_DIR } from \"../constants\";\r\n//依赖预构建--第三方依赖进行打包，并在开发环境下使用这些打包过的第三方依赖。\r\nexport async function optimize(root: string) {\r\n  // 1. 确定入口\r\n  const entry = path.resolve(root, \"src/main.tsx\");\r\n  // 2. 从入口处扫描依赖\r\n  const deps = new Set<string>();\r\n  //deps 是一个 Set 集合，用于存储扫描到的依赖项。\r\n  await build({\r\n    entryPoints: [entry],\r\n    //指定了入口文件的路径\r\n    bundle: true,\r\n    //进行打包。\r\n    write: false,\r\n    //不将构建结果写入文件，而是将其保留在内存中\r\n    plugins: [scanPlugin(deps)],\r\n    //包含扫描依赖逻辑的插件数组\r\n  });\r\n  console.log(\r\n    `${green(\"需要预构建的依赖\")}:\\n${[...deps]\r\n      .map(green)\r\n      .map((item) => `  ${item}`)\r\n      .join(\"\\n\")}`\r\n  );\r\n  // 3. 预构建依赖\r\n  await build({\r\n    entryPoints: [...deps],\r\n    write: true,\r\n    bundle: true,\r\n    format: \"esm\",\r\n    splitting: true,\r\n    outdir: path.resolve(root, PRE_BUNDLE_DIR),\r\n    plugins: [preBundlePlugin(deps)],\r\n  });\r\n}\r\n","import path from \"path\";\r\nexport const EXTERNAL_TYPES = [\r\n  \"css\",\r\n  \"less\",\r\n  \"sass\",\r\n  \"scss\",\r\n  \"styl\",\r\n  \"stylus\",\r\n  \"pcss\",\r\n  \"postcss\",\r\n  \"vue\",\r\n  \"svelte\",\r\n  \"marko\",\r\n  \"astro\",\r\n  \"png\",\r\n  \"jpe?g\",\r\n  \"gif\",\r\n  \"svg\",\r\n  \"ico\",\r\n  \"webp\",\r\n  \"avif\",\r\n];\r\n\r\nexport const BARE_IMPORT_RE = /^[\\w@][^:]/;\r\n// 预构建产物默认存放在 node_modules 中的 .m-vite 目录中\r\nexport const PRE_BUNDLE_DIR = path.join(\"node_modules\", \".m-vite\");\r\n","import { Plugin } from \"esbuild\";\r\nimport { BARE_IMPORT_RE, EXTERNAL_TYPES } from \"../constants\";\r\nexport function scanPlugin(deps: Set<string>): Plugin {\r\n  return {\r\n    name: \"esbuild:scan-deps\",\r\n    setup(build) {\r\n      // 忽略的文件类型\r\n      build.onResolve(\r\n        //匹配用于过滤需要被处理的依赖项\r\n        { filter: new RegExp(`\\\\.(${EXTERNAL_TYPES.join(\"|\")})$`) },\r\n        (resolveInfo) => {\r\n          return {\r\n            path: resolveInfo.path,\r\n            // 打上 external 标记\r\n            external: true,\r\n            //不需要处理的就打上标签\r\n          };\r\n        }\r\n      );\r\n      // 记录依赖\r\n      build.onResolve(\r\n        {\r\n          filter: BARE_IMPORT_RE,\r\n        },\r\n        (resolveInfo) => {\r\n          const { path: id } = resolveInfo;\r\n          // 推入 deps 集合中\r\n          // id变量引用了resolveInfo.path\r\n          deps.add(id);\r\n          return {\r\n            path: id,\r\n            external: true,\r\n          };\r\n        }\r\n      );\r\n    },\r\n  };\r\n}\r\n","//预构建的代码\r\nimport { Loader, Plugin } from \"esbuild\";\r\nimport { BARE_IMPORT_RE } from \"../constants\";\r\n// 用来分析 es 模块 import/export 语句的库\r\nimport { init, parse } from \"es-module-lexer\";\r\nimport path from \"path\";\r\n// 一个实现了 node 路径解析算法的库\r\nimport resolve from \"resolve\";\r\n// 一个更加好用的文件操作库\r\nimport fs from \"fs-extra\";\r\n// 用来开发打印 debug 日志的库\r\nimport createDebug from \"debug\";\r\nimport { normalizePath } from \"../utils\";\r\n\r\nconst debug = createDebug(\"dev\");\r\n\r\nexport function preBundlePlugin(deps: Set<string>): Plugin {\r\n  return {\r\n    name: \"esbuild:pre-bundle\",\r\n    setup(build) {\r\n      build.onResolve(\r\n        {\r\n          filter: BARE_IMPORT_RE,\r\n        },\r\n        (resolveInfo) => {\r\n          const { path: id, importer } = resolveInfo;\r\n          const isEntry = !importer;\r\n          // 命中需要预编译的依赖\r\n          if (deps.has(id)) {\r\n            // 若为入口，则标记 dep 的 namespace\r\n            return isEntry\r\n              ? {\r\n                  path: id,\r\n                  namespace: \"dep\",\r\n                }\r\n              : {\r\n                  // 因为走到 onResolve 了，所以这里的 path 就是绝对路径了\r\n                  path: resolve.sync(id, { basedir: process.cwd() }),\r\n                };\r\n          }\r\n        }\r\n      );\r\n\r\n      // 拿到标记后的依赖，构造代理模块，交给 esbuild 打包\r\n      build.onLoad(\r\n        {\r\n          filter: /.*/,\r\n          namespace: \"dep\",\r\n        },\r\n        async (loadInfo) => {\r\n          await init;\r\n          const id = loadInfo.path;\r\n          const root = process.cwd();\r\n          const entryPath = normalizePath(resolve.sync(id, { basedir: root }));\r\n          const code = await fs.readFile(entryPath, \"utf-8\");\r\n          const [imports, exports] = await parse(code);\r\n          let proxyModule = [];\r\n          // cjs\r\n          if (!imports.length && !exports.length) {\r\n            const res = require(entryPath);\r\n            const specifiers = Object.keys(res);\r\n            proxyModule.push(\r\n              `export { ${specifiers.join(\",\")} } from \"${entryPath}\"`,\r\n              `export default require(\"${entryPath}\")`\r\n            );\r\n          } else {\r\n            if (exports.includes(\"default\")) {\r\n              proxyModule.push(`import d from \"${entryPath}\";export default d`);\r\n            }\r\n            proxyModule.push(`export * from \"${entryPath}\"`);\r\n          }\r\n          debug(\"代理模块内容: %o\", proxyModule.join(\"\\n\"));\r\n          const loader = path.extname(entryPath).slice(1);\r\n          return {\r\n            loader: loader as Loader,\r\n            contents: proxyModule.join(\"\\n\"),\r\n            resolveDir: root,\r\n          };\r\n        }\r\n      );\r\n    },\r\n  };\r\n}\r\n","import os from \"os\";\r\nimport path from \"path\";\r\nexport function slash(p: string): string {\r\n  return p.replace(/\\\\/g, \"/\");\r\n  //将给定路径中的反斜杠 \\ 替换为斜杠 /，实现路径的标准化。\r\n}\r\n\r\nexport const isWindows = os.platform() === \"win32\";\r\n//判断当前操作系统是否为 Windows\r\nexport function normalizePath(id: string): string {\r\n  //path.posix.normalize() 方法对路径进行规范化处理\r\n  return path.posix.normalize(isWindows ? slash(id) : id);\r\n}\r\n"],"mappings":"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","names":["import_picocolors","import_path","path","build","import_path","import_path","os","path","createDebug","build","resolve","fs","path","path","connect","cac"]}