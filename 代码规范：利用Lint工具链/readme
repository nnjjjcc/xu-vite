# 自动化的工具(Lint 工具)进行代码规范检查

项目中集成完整的 Lint 工具链，搭建起完整的前端开发和代码提交工作流

## JS/TS 规范工具: ESLint

一款插件化的 JavaScript 代码静态检查工具。过配置文件对各种代码格式的规则(rules)进行配置，以指定具体的代码规范 ###初始化 and 配置解读

### 1.parser - 解析器（社区兼容了 ts）

ESLint 底层默认使用 Espree 来进行 AST 解析，这个解析器目前已经基于 Acron 来实现，虽然说 Acron 目前能够解析绝大多数的 ECMAScript 规范的语法，但还是不支持 TypeScript ，因此需要引入其他的解析器完成 TS 的解析。

社区提供了@typescript-eslint/parser 这个解决方案，专门为了 TypeScript 的解析而诞生，将 TS 代码转换为 Espree 能够识别的格式(即 Estree 格式)，然后在 Eslint 下通过 Espree 进行格式检查， 以此兼容了 TypeScript 语法。

### 2.parserOptions - 解析器选项

ecmaVersion: 这个配置和 Acron 的 ecmaVersion 是兼容的，可以配置 ES + 数字(如 ES6)或者 ES + 年份(如 ES2015)，也可以直接配置为 latest，启用最新的 ES 语法。
sourceType: 默认为 script，如果使用 ES Module 则应设置为 module
ecmaFeatures: 为一个对象，表示想使用的额外语言特性，如开启 jsx。

### 3. rules - 具体代码规则

手动调整代码规则:

```
module.exports = {
  // 其它配置省略
  rules: {
    // key 为规则名，value 配置内容
    "no-cond-assign": ["error", "always"]
  }
}
```

在 rules 对象中，key 一般为规则名，value 为具体的配置内容
规则的 ID:
off 或 0 ：表示关闭规则
warn 或 1: 开启规则，违背规则后只抛出 warning，不会导致程序退出
error 或 2: 表示开启规则，不过违背规则后抛出 error，程序会退出。
4.plugins
ESLint 插件来增加一些特定的规则，比如添加@typescript-eslint/eslint-plugin 来拓展一些关于 TS 代码的规则：

```
module.exports = {
  // 添加 TS 规则，可省略`eslint-plugin`
  plugins: ['@typescript-eslint']
}
```

添加插件后只是拓展了 ESLint 本身的规则集，但 ESLint 默认并没有开启这些规则的校验！如果要开启或者调整这些规则，你需要在 rules 中进行配置:

```
module.exports = {
  // 开启一些 TS 规则
  rules: {
    '@typescript-eslint/ban-ts-comment': 'error',
    '@typescript-eslint/no-explicit-any': 'warn',
  }
}
```

### 5. extends - 继承配置

从 ESLint 本身继承；
从类似 eslint-config-xxx 的 npm 包继承；
从 ESLint 插件继承。

```
module.exports = {
   "extends": [
     // 第1种情况
     "eslint:recommended",
     // 第2种情况，一般配置的时候可以省略 `eslint-config`
     "standard"
     // 第3种情况，可以省略包名中的 `eslint-plugin`
     // 格式一般为: `plugin:${pluginName}/${configName}`
     "plugin:react/recommended"
     "plugin:@typescript-eslint/recommended",
   ]
}
```

有了 extends 的配置，对于之前所说的 ESLint 插件中的繁多配置，我们就不需要手动一一开启了，通过 extends 字段即可自动开启插件中的推荐规则:

```
extends: ["plugin:@typescript-eslint/recommended"]
```

### 6. env 和 globals

```
module.export = {
  "env": {
    "browser": "true",
    "node": "true"
  }
}
```

指定上述的 env 配置后便会启用浏览器和 Node.js 环境，这两个环境中的一些全局变量(如 window、global 等)会同时启用。

```
module.export = {
  "env": {
    "browser": "true",
    "node": "true"
  }
}
```

指定上述的 env 配置后便会启用浏览器和 Node.js 环境，这两个环境中的一些全局变量(如 window、global 等)会同时启用。
每个全局变量的配置值有 3 种情况:
"writable"或者 true，表示变量可重写；
"readonly"或者 false，表示变量不可重写；
"off"，表示禁用该全局变量。
###ESLint 结合 Prettier 一起使用
ESLint 的规则检查以及 Prettier 的自动修复
相当于自己写的脚本

# vite 接入 ESLint

Vite 插件的方式在开发阶段进行 ESLint 扫描，以命令行的方式展示出代码中的规范问题，并能够直接定位到原文件

# 样式规范工具: Stylelint

Stylelint 已经做的足够专业，而在代码格式化方面，我们仍然需要结合 Prettier 一起来使用。

# Husky + lint-staged 的 Git 提交工作流集成
线上的代码出现不符合规范的情况。那么如何来避免这类问题呢？